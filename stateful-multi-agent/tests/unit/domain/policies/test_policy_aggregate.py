"""
Unit tests for RefundPolicy aggregate.
"""

import pytest
from datetime import datetime, timedelta
from uuid import uuid4

from domain.policies.aggregates import RefundPolicy
from domain.policies.value_objects import PolicyName, PolicyConditions, PolicyStatus
from domain.shared.value_objects import PolicyId, PolicyType, RefundPeriod


class TestRefundPolicyAggregate:
    """Test RefundPolicy aggregate."""
    
    @pytest.fixture
    def policy_data(self):
        """Create test policy data."""
        return {
            "id": PolicyId(str(uuid4())),
            "name": PolicyName("Standard Refund Policy"),
            "policy_type": PolicyType.STANDARD,
            "refund_period": RefundPeriod(30),
            "conditions": PolicyConditions("Standard refund conditions"),
            "status": PolicyStatus.ACTIVE
        }
    
    @pytest.fixture
    def policy(self, policy_data):
        """Create a test policy."""
        return RefundPolicy.create_policy(
            name=policy_data["name"],
            policy_type=policy_data["policy_type"],
            refund_period=policy_data["refund_period"],
            conditions=policy_data["conditions"]
        )
    
    def test_create_policy(self, policy_data):
        """Test creating a refund policy."""
        policy = RefundPolicy.create_policy(
            name=policy_data["name"],
            policy_type=policy_data["policy_type"],
            refund_period=policy_data["refund_period"],
            conditions=policy_data["conditions"]
        )
        
        assert policy.id is not None  # ID is generated by create_policy
        assert policy.name == policy_data["name"]
        assert policy.policy_type == policy_data["policy_type"]
        assert policy.refund_period == policy_data["refund_period"]
        assert policy.conditions == policy_data["conditions"]
        assert policy.status == PolicyStatus.ACTIVE
        assert policy.created_at is not None
        assert policy.updated_at is not None
        
        # Get domain events once and store them
        events = policy.get_domain_events()
        assert len(events) == 1
        assert events[0].__class__.__name__ == "PolicyCreated"
    
    def test_update_policy_terms(self, policy):
        """Test updating policy terms."""
        new_conditions = PolicyConditions("Updated refund conditions")
        new_refund_period = RefundPeriod(60)
        
        policy.update_terms(new_refund_period, new_conditions)
        
        assert policy.conditions == new_conditions
        assert policy.refund_period == new_refund_period
        assert policy.updated_at > policy.created_at
        
        # Get domain events once and store them
        events = policy.get_domain_events()
        assert len(events) == 2
        assert events[1].__class__.__name__ == "PolicyUpdated"
    
    def test_deprecate_policy(self, policy):
        """Test deprecating policy."""
        policy.deprecate("Policy is being phased out")
        
        assert policy.status == PolicyStatus.DEPRECATED
        assert policy.updated_at > policy.created_at
        
        # Get domain events once and store them
        events = policy.get_domain_events()
        assert len(events) == 2
        assert events[1].__class__.__name__ == "PolicyDeprecated"
    
    def test_reactivate_policy(self, policy):
        """Test reactivating deprecated policy."""
        policy.deprecate("Policy is being phased out")
        policy.reactivate()
        
        assert policy.status == PolicyStatus.ACTIVE
        assert policy.updated_at > policy.created_at
        
        # Get domain events once and store them
        events = policy.get_domain_events()
        assert len(events) == 3
        assert events[2].__class__.__name__ == "PolicyReactivated"
    
    def test_is_refund_allowed_within_period(self, policy):
        """Test refund allowed within period."""
        purchase_date = datetime.now()
        refund_date = purchase_date + timedelta(days=15)  # 15 days later
        progress = 50.0  # 50% progress
        
        assert policy.is_refund_allowed(purchase_date, refund_date, progress)
    
    def test_is_refund_allowed_outside_period(self, policy):
        """Test refund not allowed outside period."""
        purchase_date = datetime.now()
        refund_date = purchase_date + timedelta(days=45)  # 45 days later
        progress = 30.0  # 30% progress
        
        assert not policy.is_refund_allowed(purchase_date, refund_date, progress)
    
    def test_is_refund_allowed_exactly_at_period_end(self, policy):
        """Test refund allowed exactly at period end."""
        purchase_date = datetime.now()
        refund_date = purchase_date + timedelta(days=30)  # Exactly 30 days later
        progress = 75.0  # 75% progress
        
        assert policy.is_refund_allowed(purchase_date, refund_date, progress)
    
    def test_is_refund_allowed_deprecated_policy(self, policy):
        """Test refund not allowed for deprecated policy."""
        policy.deprecate("Policy is being phased out")
        purchase_date = datetime.now()
        refund_date = purchase_date + timedelta(days=15)
        progress = 20.0  # 20% progress
        
        assert not policy.is_refund_allowed(purchase_date, refund_date, progress)
    
    def test_clear_domain_events(self, policy):
        """Test clearing domain events."""
        new_refund_period = RefundPeriod(60)
        new_conditions = PolicyConditions("Updated conditions")
        policy.update_terms(new_refund_period, new_conditions)  # Generate an event
        
        assert len(policy.get_domain_events()) == 2
        policy.clear_domain_events()
        assert len(policy.get_domain_events()) == 0
    
    def test_policy_equality(self, policy_data):
        """Test policy equality based on business identity."""
        policy1 = RefundPolicy(**policy_data)
        policy2 = RefundPolicy(**policy_data)
        
        # Policies with the same ID should be considered equal for business purposes
        assert policy1.id == policy2.id
        assert policy1.name == policy2.name
        assert policy1.policy_type == policy2.policy_type
    
    def test_policy_inequality(self, policy_data):
        """Test policy inequality based on different IDs."""
        policy1 = RefundPolicy(**policy_data)
        policy_data["id"] = PolicyId(str(uuid4()))
        policy2 = RefundPolicy(**policy_data)
        
        # Policies with different IDs should not be equal
        assert policy1.id != policy2.id
        assert policy1 != policy2
